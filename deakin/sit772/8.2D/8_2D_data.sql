SELECT * FROM USER_TABLES;
DROP TABLE CUSTOMER;
DROP TABLE INVOICE;

-- CUSTOMER
CREATE TABLE CUSTOMER (
CUST_NUM	NUMBER PRIMARY KEY,
CUST_LNAME	VARCHAR(15) NOT NULL,
CUST_FNAME	VARCHAR(15) NOT NULL,
CUST_BALANCE	NUMBER(9,2) DEFAULT 0.00
);

DESC CUSTOMER;

-- INVOICE
CREATE TABLE INVOICE (
INV_NUM     	NUMBER PRIMARY KEY,
CUST_NUM	NUMBER NOT NULL REFERENCES CUSTOMER(CUST_NUM),
INV_DATE  	DATE DEFAULT SYSDATE NOT NULL,
INV_AMOUNT	NUMBER(9,2) DEFAULT 0.00,
CONSTRAINT INV_CK1 CHECK (INV_DATE > TO_DATE('01-JAN-2012','DD-MON-YYYY'))
);

DESC INVOICE;

SELECT * FROM INVOICE;

-- INSERT 
INSERT INTO CUSTOMER VALUES (1000, 'Smith', 'Jeanne', 1050.11);
INSERT INTO CUSTOMER VALUES (1001, 'Ortega', 'Juan', 840.92);

INSERT INTO INVOICE VALUES (8000, 1000, '23-Mar-16', 235.89);
INSERT INTO INVOICE VALUES (8001, 1001, '23-Mar-16', 312.82);
INSERT INTO INVOICE VALUES (8002, 1001, '30-Mar-16', 526.10);
INSERT INTO INVOICE VALUES (8003, 1000, '12-Apr-16', 194.78);
INSERT INTO INVOICE VALUES (8004, 1000, '23-Apr-16', 619.44);

-- create procedure
CREATE OR REPLACE PROCEDURE PRC_ADD_CUSTOMER(CUST_NUM IN NUMBER,CUST_LNAME IN VARCHAR,CUST_FNAME IN VARCHAR,
                                             CUST_BALANCE IN NUMBER)
AS BEGIN
        INSERT INTO CUSTOMER VALUES (CUST_NUM, CUST_LNAME, CUST_FNAME, CUST_BALANCE);
END;
/

-- create function
CREATE OR REPLACE FUNCTION get_invoice_count(NUM IN NUMBER)
RETURN NUMBER IS
    invoicesCount NUMBER := 0;
BEGIN
 SELECT COUNT(1) INTO invoicesCount FROM INVOICE WHERE INVOICE.CUST_NUM =NUM;
RETURN invoicesCount;
END;
/

SELECT get_invoice_count(0) FROM DUAL;
SELECT get_invoice_count(1000) FROM DUAL;
SELECT get_invoice_count(1005) FROM DUAL;

-- create trigger
CREATE OR REPLACE TRIGGER TRG_UPDATE_CUST_BALANCE
    AFTER INSERT OR UPDATE OR DELETE ON INVOICE
    FOR EACH ROW
DECLARE
    TOTAL_BALANCE NUMBER := 0;
BEGIN
    -- 根据操作类型选择 CUST_NUM
    IF INSERTING THEN
        SELECT NVL(CUST_BALANCE, 0) INTO TOTAL_BALANCE FROM CUSTOMER WHERE CUSTOMER.CUST_NUM = :NEW.CUST_NUM;
        TOTAL_BALANCE := TOTAL_BALANCE + :NEW.INV_AMOUNT;
        UPDATE CUSTOMER SET CUST_BALANCE = TOTAL_BALANCE WHERE CUSTOMER.CUST_NUM = :NEW.CUST_NUM;
    ELSIF UPDATING THEN
        SELECT CUST_BALANCE INTO TOTAL_BALANCE FROM CUSTOMER WHERE CUSTOMER.CUST_NUM = :OLD.CUST_NUM;
        TOTAL_BALANCE := TOTAL_BALANCE - :OLD.INV_AMOUNT + :NEW.INV_AMOUNT;
        UPDATE CUSTOMER SET CUST_BALANCE = TOTAL_BALANCE WHERE CUSTOMER.CUST_NUM = :OLD.CUST_NUM;
    ELSIF DELETING THEN
        SELECT CUST_BALANCE INTO TOTAL_BALANCE FROM CUSTOMER WHERE CUSTOMER.CUST_NUM = :OLD.CUST_NUM;
        TOTAL_BALANCE := TOTAL_BALANCE - :OLD.INV_AMOUNT;
        UPDATE CUSTOMER SET CUST_BALANCE = TOTAL_BALANCE WHERE CUSTOMER.CUST_NUM = :OLD.CUST_NUM;
    END IF;
END;

/

DROP TRIGGER TRG_UPDATE_CUST_BALANCE;

SELECT * FROM CUSTOMER;
INSERT INTO INVOICE VALUES (8005,1001,'27-Apr-2016',225.40);
SELECT * FROM CUSTOMER;
SELECT * FROM INVOICE;

UPDATE CUSTOMER SET CUST_BALANCE =840.92 WHERE  CUST_NUM = 1001;
UPDATE INVOICE SET INV_AMOUNT =200 WHERE CUST_NUM =1001 AND INV_AMOUNT = 225.40;


-- create procedure
CREATE OR REPLACE PROCEDURE PRC_ADD_INVOICE(INV_NUM IN NUMBER,CUST_NUM IN NUMBER,INV_DATE IN DATE,INV_AMOUNT IN
    NUMBER)
AS
BEGIN
    INSERT INTO INVOICE VALUES (INV_NUM, CUST_NUM, INV_DATE, INV_AMOUNT);
END;
/


SELECT * FROM CUSTOMER;
SELECT * FROM INVOICE;
EXEC PRC_ADD_INVOICE(8006,1002,TO_DATE('29-Apr-2016','DD-MON-YYYY'),175.85);
SELECT * FROM INVOICE;
SELECT * FROM CUSTOMER;